clear; clc;
close all;

%% constants
% circle radius
r = 0.01;      %nm
spacing = 0.1;    %nm
noise_variance = 0.05;
noise_mean = 0;
% grid size
x_step = 0.001; %nm
y_step = 0.001; %nm
x_low = -2.048; %nm
x_upper = 2.048; %nm
y_low = -2.048; %nm
y_upper = 2.048; %nm
x = x_low:x_step:x_upper; %nm
y = y_low:y_step:y_upper; %nm

[xx, yy] = meshgrid(x, y);
rr1 = sqrt(xx.^2 + yy.^2);

%% circle matrix
num_pixels_x = ceil(r / x_step) + 1;
num_pixels_y = ceil(r / y_step) + 1;

% constants for filling in circle matrix
start_y = -(num_pixels_y-1) * y_step;
start_x = -(num_pixels_x-1) * x_step;
circle = zeros(num_pixels_y*2-1, num_pixels_x*2-1);

% fill in circle matrix
x_idx = 1;
for x = start_x:x_step:abs(start_x)
    y_idx = 1;
    for y = start_y:y_step:abs(start_y)
        rr = sqrt(x ^ 2 + y ^ 2);
        if(rr <= r)
            circle(y_idx, x_idx) = 1;
        end
        y_idx = y_idx + 1;
    end
    x_idx = x_idx + 1;
end

%% make circles
final = zeros(size(yy));

x_unit = ceil((2*r + spacing)/x_step);
y_unit = ceil((2*r + spacing)/y_step);

y_start_offset = ceil(r / y_step);
x_start_offset = ceil(r / x_step);

x = x_start_offset + 1;
y = y_start_offset + 1;

x_range = floor(r / x_step);
y_range = floor(r / y_step);

sz_x = size(final,2);
sz_y = size(final,1);

while(x <= size(xx,2))
    y = y_start_offset + 1;
    while(y <= size(yy,1))
        if(y +  y_range> sz_y && x + x_range > sz_x)
            final(y-y_range:end, x-x_range:end) = circle(1:sz_y-y+y_range + 1, 1:sz_x-x+x_range + 1);
        elseif (y + y_range > size(final, 2))
            final(y-y_range:end, x-x_range:x+x_range) = circle(1:sz_y-y+y_range + 1, :);
        elseif (x + x_range > size(final, 1))
            final(y-y_range:y+y_range, x-x_range:end) = circle(:, 1:sz_x-x+x_range + 1);
        else
            final(y-y_range:y+y_range, x-x_range:x+x_range) = circle(:, :);
        end
        y = y + y_unit;
    end
    x = x + x_unit;
end

% make mask
mask_radius = ((min(size(xx, 1), size(xx, 2)))/2) * x_step;
mask = rr1;
mask(rr1 <= mask_radius) = 1;
mask(rr1 > mask_radius) = 0;

final = final .* mask;
final = imnoise(final, 'gaussian', noise_mean, noise_variance);


fft_final = fftshift(fft2(final));

final_im = imag(fft_final);
final_real = real(fft_final);
final_phase = atan(final_im ./ final_real);

Fig1 = figure(1);

ax(1) = subplot(1, 3, 1);
hold on;
% set(gca, 'YDir', 'reverse');
imagesc(final);
title('Real Space Image');
xlabel('x nm');
ylabel('y nm');
axis square;
colorbar
hold off;

ax(1) = subplot(1, 3, 2);
hold on;
% set(gca, 'YDir', 'reverse');
imagesc(log(abs(fft_final)));
title('Amplitude');
xlabel('kx');
ylabel('ky');
axis square;
colorbar
hold off;

ax(1) = subplot(1, 3, 3);
hold on;
% set(gca, 'YDir', 'reverse');
% circle_phase = imgaussfilt(circle_phase);
imagesc(final_phase);
title('Phase')
xlab
axis square;
colorbar
hold off;

exportgraphics(gcf,'vectorfig.pdf','ContentType','vector')
