clear; clc; close all;
% which image
row = 2;
col = 1;

% apeture parameters
r = [20, 20];
spacing = 40;
N = 812; %number of pixels
l = 0;
w = 0;
noise_mean = 0;
noise_variance = 0.005;

total_spacing = spacing/2 + r(1);
if(spacing == 0)
    px = [N/2];
    py = [N/2];
else
    px = [N/2 - total_spacing, N/2 + total_spacing];
    py = [N/2, N/2];
end

%Image Parameters
N_padded = 4096;
contrast_min = 98.5;
contrast_max = 99.8;
% contrast_min_log = 0;
% contrast_max_log = 99.97;
padding = (N_padded - N) / 2;

zoom_factor = 16;
crop_start = N_padded/2 - (N_padded/zoom_factor);
crop_end = N_padded/2 + (N_padded/zoom_factor);
filename_real = "plate1_real_" + string(row) + "_" + string(col) + ".tif";
filename_amp = "plate1_amplog_" + string(row) + "_" + string(col) + ".tif";
filename_amp2 = "plate1_amp_" + string(row) + "_" + string(col) + ".tif";

% make plate
[xx, yy] = meshgrid(1:N);

% printing circles
obj = zeros(N);
for i = 1:length(px)
    rr = sqrt((xx - px(i)).^2 + (yy-py(i)).^2);
    obj(rr <= r(i)) = 1;
end

% printing rectangles
% obj = zeros(N);
% for i = 1:length(px)
%     x1 = xx - px(i);
%     y1 = yy - py(i);
%     obj(xx <= w && yy <= l) = 1;
% end


%Display real
disp_obj = imnoise(obj, 'gaussian', noise_mean, noise_variance);
disp_obj = rescale(disp_obj);
img = figure;
hold on;
colormap(flipud(colormap(gray)));
imagesc(disp_obj);
axis square;
axis tight;
axis off;
fig = gcf;
exportgraphics(fig, filename_real);
set(gca, 'YDir', 'reverse');
hold off;

% take fft
obj = padarray(obj, [padding, padding], 'both');
obj = imnoise(obj, 'gaussian', noise_mean, noise_variance);
obj_fft = fftshift( fft2(obj) );

% set contrast and crop - no log
obj_fft2 = ((obj_fft).*conj(obj_fft));
obj_fft2 = rescale(obj_fft2);
val_range = prctile(obj_fft2, [contrast_min contrast_max], 'all');
obj_fft2 = imadjust(obj_fft2, [val_range(1) val_range(2)], [0 1]);
obj_fft2 = obj_fft2(crop_start:crop_end, crop_start:crop_end);

no_log = figure;
hold on;
imagesc(obj_fft2);
colormap("gray")
axis square;
axis tight;
% axis off;
imwrite(obj_fft2, filename_amp2, 'tif');
hold off;

% set contrast and crop - log
% obj_fft1 = log((obj_fft).*conj(obj_fft));
% obj_fft1 = rescale(obj_fft1);
% val_range = prctile(obj_fft1, [contrast_min contrast_max], 'all');
% obj_fft1 = imadjust(obj_fft1, [val_range(1) val_range(2)], [0 1]);
% obj_fft1 = obj_fft1(crop_start:crop_end, crop_start:crop_end);
% 
% log = figure;
% hold on;
% imagesc(obj_fft1);
% colormap("gray")
% axis square;
% axis tight;
% % axis off;
% imwrite(obj_fft1, filename_amp, 'tif');
% hold off;
